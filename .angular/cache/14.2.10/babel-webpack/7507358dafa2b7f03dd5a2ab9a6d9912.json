{"ast":null,"code":"import { HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ExternalfacingService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = \"https://jsonplaceholder.typicode.com/\";\n    this.baseURLtodos = \"https://jsonplaceholder.typicode.com\";\n    this.gamesURL = \"https://api.rawg.io/api/games\";\n    this.wordsURL = \"https://wordsapiv1.p.rapidapi.com/words/\";\n    this.randomArr = [];\n  } // getUsers(): Observable<any>{\n  //   const params = new HttpParams()\n  //   .set('sort',\"description\")\n  //   .set('page',\"2\");\n  //   return this.http.get(this.baseURL+'users',{responseType:'text'}) //normally without async await simple get call\n  // }\n\n\n  getUsers() {\n    const headers = new HttpHeaders() //HIDE YOUR DAMN KEYYYYYYYYYYYYYYYYYYYYYYYYYY\n    .set('X-RapidAPI-Key', '3f69eb5f8dmshf0a95026a2ca966p1862c3jsn5071a9a9bf4d').set('X-RapidAPI-Host', 'wordsapiv1.p.rapidapi.com');\n    const params = new HttpParams().set('random', 'true');\n    const options = {\n      'headers': headers,\n      'params': params\n    }; //return this.http.get<any>(this.wordsURL,{'headers':headers,'params':params}) //Explicitly giving the headers and parameters\n\n    return this.http.get(this.wordsURL, options); //specifying the headers and parameters in an options value and passing that\n  }\n\n}\n\nExternalfacingService.ɵfac = function ExternalfacingService_Factory(t) {\n  return new (t || ExternalfacingService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nExternalfacingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ExternalfacingService,\n  factory: ExternalfacingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAArB,EAAiCC,WAAjC,QAAoD,sBAApD;;;AAQA,OAAM,MAAOC,qBAAP,CAA4B;EAQhCC,YAAoBC,IAApB,EAAoC;IAAhB;IANpB,eAAkB,uCAAlB;IACA,oBAAuB,sCAAvB;IACA,gBAAmB,+BAAnB;IACA,gBAAmB,0CAAnB;IACA,iBAAY,EAAZ;EAEyC,CART,CAUhC;EACA;EACA;EACA;EAEA;EACA;;;EAEEC,QAAQ;IAEF,MAAMC,OAAO,GAAG,IAAIL,WAAJ,GAAiB;IAAjB,CACCM,GADD,CACK,gBADL,EACsB,oDADtB,EAECA,GAFD,CAEK,iBAFL,EAEuB,2BAFvB,CAAhB;IAGA,MAAMC,MAAM,GAAG,IAAIR,UAAJ,GAAiBO,GAAjB,CAAqB,QAArB,EAA8B,MAA9B,CAAf;IACA,MAAME,OAAO,GAAG;MAAC,WAAUH,OAAX;MAAmB,UAASE;IAA5B,CAAhB,CANE,CAOF;;IACA,OAAO,KAAKJ,IAAL,CAAUM,GAAV,CAAc,KAAKC,QAAnB,EAA4BF,OAA5B,CAAP,CARE,CAQ0C;EAC7C;;AA3ByB;;;mBAArBP,uBAAqBU;AAAA;;;SAArBV;EAAqBW,SAArBX,qBAAqB;EAAAY,YAFpB","names":["HttpParams","HttpHeaders","ExternalfacingService","constructor","http","getUsers","headers","set","params","options","get","wordsURL","i0","factory","providedIn"],"sourceRoot":"","sources":["/Users/suman/Projects/angular-basics/src/app/externalfacing.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\nimport { Observable} from 'rxjs';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExternalfacingService {\n\n  baseURL: string = \"https://jsonplaceholder.typicode.com/\"\n  baseURLtodos: string = \"https://jsonplaceholder.typicode.com\"\n  gamesURL: string = \"https://api.rawg.io/api/games\"\n  wordsURL: string = \"https://wordsapiv1.p.rapidapi.com/words/\"\n  randomArr = []\n\n  constructor(private http: HttpClient) { }\n\n  // getUsers(): Observable<any>{\n  //   const params = new HttpParams()\n  //   .set('sort',\"description\")\n  //   .set('page',\"2\");\n\n  //   return this.http.get(this.baseURL+'users',{responseType:'text'}) //normally without async await simple get call\n  // }\n\n    getUsers():Observable<any>\n        {\n          const headers = new HttpHeaders()//HIDE YOUR DAMN KEYYYYYYYYYYYYYYYYYYYYYYYYYY\n                          .set('X-RapidAPI-Key','3f69eb5f8dmshf0a95026a2ca966p1862c3jsn5071a9a9bf4d')\n                          .set('X-RapidAPI-Host','wordsapiv1.p.rapidapi.com');\n          const params = new HttpParams().set('random','true');\n          const options = {'headers':headers,'params':params}\n          //return this.http.get<any>(this.wordsURL,{'headers':headers,'params':params}) //Explicitly giving the headers and parameters\n          return this.http.get(this.wordsURL,options) //specifying the headers and parameters in an options value and passing that\n        }\n}"]},"metadata":{},"sourceType":"module"}